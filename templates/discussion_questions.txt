Part 1: Discussion Questions

---Runtime

When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?
Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
O(log n)
O(n2)
O(n log n)
O(n)
O(2n)
O(1)

        O(1)
        O(log n)
        O(n)
        O(2n)
        O(n log n)
        O(n2)


---Stacks and Queues

In the following cases, would a stack or queue be a more appropriate data structure?

The process of loading and unloading pallets onto a flatbed truck
    stack

Putting bottle caps on bottles of beer as they roll down an assembly line
    queue
Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
    stack

Describe two more situations where a queue would be an appropriate data structure.
    breadth-first search
    processing helpdesk requests
    
Describe two more situations where a stack would be an appropriate data structure.
    depth-first search
    processing recursive functions! :)

---Linked Lists

Given the linked list below, which are the nodes? 
    The paired boxes for each of the fruits, e.g. "Apple", next

What is the data for each node? 
    The text in the first box for each fruit, e.g. "Apple"

Where is the head? 
    The first node:  "Apple", next


Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)
    The last node: "Cherry", next

What’s the difference between doubly- and singly-linked lists?
    Doubly-linked points to BOTH the next node AND the previous.  Whereas a singly-linked list (as shown) only points the next node.

Why is it faster to append to a linked list if we keep track of the tail as an attribute?
    If not, every append would require an O(n) runtime to traverse through the entire list to find the tail every time.

---Trees

Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    food
    Italian
    Indian
    Mexican
    lasagna
    pizza
    tikka masala
    saag
    burritos
    tacos
    enchiladas
    thin crust
    Chicago-style
    NY-style
    Sicilian


Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    food
    Mexican
    enchiladas
    tacos
    burritos
    Indian
    saag
    tikka masala
    Itlaian
    pizza
    Sicilian
    NY-style
    Chicago-style
    thin crust
    lasagna

    (I'm so hungry now.)

How is a binary search tree different from other trees?
    A binary search tree requires that there be no more than 2 branches off of each node. And it only provides any sort of usefullness if it is reasonably balanced. Unlike other trees, there is no effort to mimic any real-world hierarchy or logic.  Rather, it is meant at each branch to divide the remaining data in half (or as close as possible) in some kind of order (alphabetical, numerical, etc.)